#!/usr/bin/env python
#-*- coding:utf-8 -*-

recorded_segment = []

def record():
	global recorded_segment
	pass
def predict():
	global recorded_segment
	pass
def do_conversation():
        interval_len = int(Main.CONV_INTERVAL * Main.FS)
        segment_len = int(Main.CONV_DURATION * Main.FS)
        conv_now_pos += interval_len
        to_filter = recordData[max([conv_now_pos - segment_len, 0]):
                                   conv_now_pos]
        signal = np.array(to_filter, dtype=NPDtype)
        label = None
        try:
            signal = backend.filter(Main.FS, signal)
            if len(signal) > 50:
                label = backend.predict(Main.FS, signal, True)
        except Exception as e:
            print traceback.format_exc()
            print str(e)

        global last_label_to_show
        label_to_show = label
        if label and conv_result_list:
            last_label = conv_result_list[-1]
            if last_label and last_label != label:
                label_to_show = last_label_to_show
        conv_result_list.append(label)

        print label_to_show, "label to show"
        last_label_to_show = label_to_show

while True :
	record()
	predict()
